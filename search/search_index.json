{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HTMLTab documentation","text":"<p>HTMLTab is a command-line utility that parses an HTML document (from a URL or a local file), picks out a <code>&lt;table&gt;</code> element of your choosing, and converts it to CSV data.</p> <p>With HTMLTab you can:</p> <ul> <li>Convert an HTML table into CSV data in a single command</li> <li>Pick which table within the HTML to convert using a CSS selector, XPath expression, or integer index</li> <li>Remove percent signs and currency symbols from numbers</li> <li>Convert number-like strings into integer or float values (e.g. convert <code>1.000.000,00</code> to <code>1000000.00</code>)</li> <li>Define what counts as a null value</li> <li>Save the CSV data to a file</li> </ul> <p>HTMLTab is written in Python. To use it you\u2019ll need Python version 3.12 or higher installed on your system. Visit Real Python for a step-by-step guide for installing Python on your operating system.</p>"},{"location":"#installation","title":"Installation","text":"<p>The recommended method of installation is to use Pipx to install HTMLTab system-wide:</p> <pre><code>pipx install git+https://github.com/flother/htmltab\n</code></pre> <p>Once installation is complete the <code>htmltab</code> command will be available to you in your favourite shell.</p> <p>If you can\u2019t use Pipx you can install HTMLTab using Python\u2019s standard package manager, Pip. Ideally, you should install HTMLTab in a virtual environment.</p> <pre><code>pip install git+https://github.com/flother/htmltab#egg=htmltab\n</code></pre> <p>Once installation is complete the <code>htmltab</code> command will be available while the virtual environment is active.</p> <p>To find out how to use the <code>htmltab</code> command, see the CLI reference.</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>If you want to convert the first table in a webpage into CSV data, you simply need to pass the URL to HTMLTab. Let\u2019s say you want to see the latest standings in the English Premier League. We can easily get that from The Guardian\u2019s league table page:</p> <pre><code>htmltab https://www.theguardian.com/football/premierleague/table\n</code></pre> <p>Running that will output that page\u2019s copy of the league table as a CSV:</p> <pre><code>P,Team,GP,W,D,L,F,A,GD,Pts,Form\n1,Man City,21,17,2,2,53,13,40,53,Won against Leeds Won against Newcastle Won against Leicester Won against Brentford Won against Arsenal\n2,Chelsea,21,12,7,2,45,16,29,43,Drew with Everton Drew with Wolves Won against Aston Villa Drew with Brighton Drew with Liverpool\n3,Liverpool,20,12,6,2,52,18,34,42,Won against Aston Villa Won against Newcastle Drew with Spurs Lost to Leicester Drew with Chelsea\n4,Arsenal,20,11,2,7,33,25,8,35,Won against Southampton Won against West Ham Won against Leeds Won against Norwich Lost to Man City\n5,West Ham,20,10,4,6,37,27,10,34,Drew with Burnley Lost to Arsenal Lost to Southampton Won against Watford Won against C Palace\n6,Spurs,18,10,3,5,23,20,3,33,Won against Norwich Drew with Liverpool Won against C Palace Drew with Southampton Won against Watford\n7,Man Utd,19,9,4,6,30,27,3,31,Won against C Palace Won against Norwich Drew with Newcastle Won against Burnley Lost to Wolves\n8,Wolves,19,8,4,7,14,14,0,28,Lost to Liverpool Lost to Man City Won against Brighton Drew with Chelsea Won against Man Utd\n9,Brighton,19,6,9,4,20,20,0,27,Drew with Southampton Lost to Wolves Won against Brentford Drew with Chelsea Won against Everton\n10,Leicester,18,7,4,7,31,33,-2,25,Drew with Southampton Lost to Aston Villa Won against Newcastle Lost to Man City Won against Liverpool\n11,C Palace,20,5,8,7,29,30,-1,23,Won against Everton Drew with Southampton Lost to Spurs Won against Norwich Lost to West Ham\n12,Brentford,19,6,5,8,23,26,-3,23,Drew with Leeds Won against Watford Lost to Brighton Lost to Man City Won against Aston Villa\n13,Aston Villa,19,7,1,11,25,30,-5,22,Won against Leicester Lost to Liverpool Won against Norwich Lost to Chelsea Lost to Brentford\n14,Southampton,19,4,9,6,20,29,-9,21,Drew with Brighton Lost to Arsenal Drew with C Palace Won against West Ham Drew with Spurs\n15,Everton,18,5,4,9,23,32,-9,19,Lost to Liverpool Won against Arsenal Lost to C Palace Drew with Chelsea Lost to Brighton\n16,Leeds,19,4,7,8,21,37,-16,19,Drew with Brentford Lost to Chelsea Lost to Man City Lost to Arsenal Won against Burnley\n17,Watford,18,4,1,13,22,36,-14,13,Lost to Chelsea Lost to Man City Lost to Brentford Lost to West Ham Lost to Spurs\n18,Burnley,17,1,8,8,16,27,-11,11,Drew with Wolves Lost to Newcastle Drew with West Ham Lost to Man Utd Lost to Leeds\n19,Newcastle,19,1,8,10,19,42,-23,11,Won against Burnley Lost to Leicester Lost to Liverpool Lost to Man City Drew with Man Utd\n20,Norwich,19,2,4,13,8,42,-34,10,Lost to Spurs Lost to Man Utd Lost to Aston Villa Lost to Arsenal Lost to C Palace\n</code></pre> <p>You can save the CSV data to a file with the <code>--output</code> flag:</p> <pre><code>htmltab https://www.theguardian.com/football/premierleague/table --output epl.csv\n</code></pre> <p>HTMLTab is useful in combination with other tools. We can use the standard Unix tool <code>head</code> to show only the top six teams and format the table with xsv, removing the wordy \u201cForm\u201d column in the process:</p> <pre><code>$ htmltab https://www.theguardian.com/football/premierleague/table | head -n 7 | xsv select \"!Form\" | xsv table\nP   Team       GP  W   D   L   F   A   GD  Pts\n1   Man City   21  17  2   2   53  13  40  53\n2   Chelsea    21  12  7   2   45  16  29  43\n3   Liverpool  20  12  6   2   52  18  34  42\n4   Arsenal    20  11  2   7   33  25  8   35\n5   West Ham   20  10  4   6   37  27  10  34\n6   Spurs      18  10  3   5   23  20  3   33\n</code></pre> <p>We could combine HTMLTab with Miller to find out how many goals have been scored this season:</p> <pre><code>$ htmltab https://www.theguardian.com/football/premierleague/table | mlr --icsv put -q '@goals += $F; end { emit @goals }'\ngoals=544\n</code></pre>  <p>Tip</p> <p>Because The Guardian\u2019s page contains live league data, your results will probably differ from the data above.</p>"},{"location":"#what-next","title":"What next?","text":"<ul> <li>See more examples</li> <li>Read the CLI reference</li> <li>Set up a development environment</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#version-030-unreleased","title":"Version 0.3.0 (unreleased)","text":"<ul> <li>Switch to using uv for project management</li> <li>Bump minimum required version of Python to 3.12 (released Oct 2023)</li> <li>Add <code>--delimiter</code> command-line option. Use it to choose the character that separates CSV fields in the output</li> <li>Add type annotations</li> </ul>"},{"location":"changelog/#version-020-3-jan-2022","title":"Version 0.2.0 (3\u00a0Jan\u00a02022)","text":"<ul> <li>Fix Pipx installation (see issue #6)</li> <li>Update dependencies</li> </ul> <p>Compare full changes from v0.1.0.</p>"},{"location":"changelog/#version-010-4-apr-2021","title":"Version 0.1.0 (4\u00a0Apr\u00a02021)","text":"<ul> <li>Add <code>--output</code> command-line option (see issue #4)</li> <li>Update dependencies</li> </ul> <p>Compare full changes from v0.1.0-pre.</p>"},{"location":"changelog/#version-010-pre-27-aug-2016","title":"Version 0.1.0-pre (27\u00a0Aug\u00a02016)","text":"<p>Initial beta release.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>HTMLTab is an open-source project and contributions are welcome.</p>"},{"location":"contributing/#setting-up-a-development-environment","title":"Setting up a development environment","text":"<p>HTMLTab is written in Python and uses uv for project management. Install uv before you do anything else.</p> <p>Create a fork of HTMLTab under your own GitHub account, and then clone that repo on your computer:</p> <pre><code>git clone git@github.com:YOURNAME/htmltab\n</code></pre>  <p>Note</p> <p>If you want to get started without creating a fork, clone the original repo instead:</p> <pre><code>git clone git@github.com:flother/htmltab\n</code></pre>  <p>Now you can use uv to create a virtual environment:</p> <pre><code>uv venv --python 3.12\n</code></pre> <p>And then install the project\u2019s dependencies:</p> <pre><code>uv sync\n</code></pre> <p>Once that\u2019s complete, activate the virtual environment:</p> <pre><code>source .venv/bin/activate\n</code></pre> <p>Now you\u2019re ready to start developing! You can run HTMLTab, and any changes you make will be reflected in the command-line program:</p> <pre><code>htmltab --help\n</code></pre>"},{"location":"contributing/#serving-the-documentation-locally","title":"Serving the documentation locally","text":"<p>HTMLTab\u2019s documentation \u2014 the documentation you\u2019re reading now \u2014 can be found in the repo\u2019s <code>docs</code> sub-directory. It\u2019s written in Markdown and converted to HTML using MkDocs. You can run the MkDocs server locally with uv:</p> <pre><code>uvx --with mkdocs-material==9 mkdocs@1.6 serve\n</code></pre> <p>You can then view the documentation in your browser at http://localhost:8000/. Any changes you make to the docs will be reflected in your browser.</p> <p>When changes are committed to the <code>master</code> branch, a GitHub Actions workflow (<code>.github/workflows/publish_docs.yml</code>) will publish the latest docs to https://flother.github.io/htmltab.</p>"},{"location":"usage/","title":"CLI reference","text":"<p>The basic form to invoke HTMLTab from the command-line is:</p> <pre><code>htmltab [OPTIONS] [HTML_DOCUMENT]\n</code></pre> <p>The options are, of course, optional but you must supply an HTML document as input.</p>"},{"location":"usage/#supplying-an-input-html-document","title":"Supplying an input HTML document","text":"<p>You can pass an HTML document to HTMLTab in three different ways:</p> <ul> <li>A local file</li> <li>A remote URL</li> <li>A stream from <code>stdin</code></li> </ul>"},{"location":"usage/#local-file","title":"Local file","text":"<p>Say you have a file named <code>data.html</code> in the current directory. You can pass that to HTMLTab with:</p> <pre><code>htmltab data.html\n</code></pre> <p>All the usual filepath shortcuts are supported: <code>.</code> for the current directory, <code>..</code> for the parent directory, <code>~</code> for your home directory, <code>~rebecca</code> for Rebecca\u2019s home directory.</p>"},{"location":"usage/#remote-url","title":"Remote URL","text":"<p>If you want HTMLTab to request a remote URL and parse the returned HTML, use a similar invocation:</p> <pre><code>htmltab https://www.example.com/data.html\n</code></pre> <p>HTMLTab supports <code>http://</code> and <code>https://</code> URLs. If a URL returns an <code>HTTP 4xx</code> or <code>HTTP 5xx</code> error \u2014 for example, <code>HTTP 404 Not Found</code> \u2014 HTMLTab will exit with an error. HTMLTab will only make <code>GET</code> requests. If you need to use any other method you can stream from <code>stdin</code>.</p>"},{"location":"usage/#streaming-from-stdin","title":"Streaming from <code>stdin</code>","text":"<p>If you want to read from standard input (<code>stdin</code>), use <code>-</code> as the HTML document. Using a Unix pipe to pass the output of a <code>POST</code> request made by curl into HTMLTab:</p> <pre><code>curl -X POST https://www.example.com/data.html | htmltab -\n</code></pre> <p>Or reading from a here string:</p> <pre><code>htmltab - &lt;&lt;&lt; \"&lt;table&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\"\n</code></pre> <p>In fact, <code>-</code> is the default value for the input HTML document, so you don\u2019t need to include it explicitly if you\u2019re using <code>stdin</code>. The following two examples are equivalent to the two directly above.</p> <pre><code>curl -X POST https://www.example.com/data.html | htmltab\n</code></pre> <pre><code>htmltab &lt;&lt;&lt; \"&lt;table&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\"\n</code></pre>"},{"location":"usage/#options","title":"Options","text":"<p>You can use command-line options to modify the operation of the command.</p>"},{"location":"usage/#-select","title":"<code>--select</code>","text":"<p>The <code>--select</code> option is used when your input HTML document has multiple tables, and you want to convert a table that isn\u2019t the first table in the document. When that\u2019s the case you can use one of three methods of specifying the table:</p> <ul> <li>Integer index</li> <li>CSS selector</li> <li>XPath expression</li> </ul>"},{"location":"usage/#integer-index","title":"Integer index","text":"<p>When you know you want the nth table in the HTML document, where n &gt; 0, you can simply pass n to <code>--select</code>. This is called the integer index method. For example, if you have a local file <code>data.html</code> and you want to convert its third table to CSV, you can use:</p> <pre><code>htmltab --select 3 data.html\n</code></pre> <p>The integer index is one-based: <code>1</code> means the first table in the HTML document (as opposed to the second table as it would be in zero-based numbering). A zero or a negative value is an error.</p>"},{"location":"usage/#css-selector","title":"CSS selector","text":"<p>Sometimes, over time, a table moves around within an HTML document. This is especially true when you\u2019re targetting a remote URL. One day the table may be the fourth within a document, the next it may be the fifth. In these cases you want to select the table by referencing the document structure. This is where CSS selectors or XPath expressions come in handy.</p> <p>Let\u2019s say you\u2019re interested in an HTML document that contains weekly summarised data, and that table appears below other tables containing daily totals. On Mondays it\u2019s the second table in the document, on Tuesdays it\u2019s the third table in the document, and so on. Fortunately, the table has an <code>id</code> attribute with the value <code>weeklydata</code>. Using a CSS selector, you can use that id to target the table wherever it appears in the document:</p> <pre><code>htmltab --select \"#weeklydata\" https://www.example.com/data.html\n</code></pre> <p>HTMLTab supports almost all CSS3 selectors. For further details see the documentation of the underlying <code>cssselect</code> library.</p>"},{"location":"usage/#xpath-expression","title":"XPath expression","text":"<p>CSS selectors will probably be all you need, but in some complex cases you may need something more powerful. If that\u2019s the case you can use an XPath expression as the value for <code>--select</code>. One example would be where you need the last table in an HTML document:</p> <pre><code>htmltab --select \"(//table)[last()]\" https://www.example.com/data.html\n</code></pre>"},{"location":"usage/#default-value-and-short-form","title":"Default value and short form","text":"<p>The default value of <code>--select</code> is <code>1</code>, which means the first table in the HTML document will be converted to CSV.</p> <p>The short form of the <code>--select</code> option is <code>-s</code>.</p>"},{"location":"usage/#-output","title":"<code>--output</code>","text":"<p>Writes the CSV data output by HTMLTab to file instead of <code>stdout</code>.</p> <pre><code>htmltab data.html --output data.csv\n</code></pre> <p>The short form of this option is <code>-o</code>.</p>"},{"location":"usage/#-keep-numbers","title":"<code>--keep-numbers</code>","text":"<p>Tells HTMLTab to leave any number-like values in the table unchanged (so, for example, currency symbols or percent signs will not be removed). This option turns off the default behaviour of converting number-like values.</p> <pre><code>$ htmltab --keep-numbers &lt;&lt;&lt; '&lt;table&gt;&lt;tr&gt;&lt;td&gt;$1,000.00&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'\n\"$1,000.00\"\n</code></pre> <p>This is the opposite of the <code>--convert-numbers</code> option. The two options cannot be used together.</p> <p>The short form of this option is <code>-k</code>.</p>"},{"location":"usage/#-convert-numbers","title":"<code>--convert-numbers</code>","text":"<p>Tells HTMLTab to convert number-like values in the table into integer or float values (for example, removing currency symbols or percent signs). This is the default behaviour and you shouldn\u2019t need to pass this option explicitly.</p> <pre><code>$ htmltab --convert-numbers &lt;&lt;&lt; '&lt;table&gt;&lt;tr&gt;&lt;td&gt;$1,000.00&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'\n1000.00\n</code></pre> <p>This is the opposite of the <code>--keep-numbers</code> option. The two options cannot be used together.</p> <p>The short form of this option is <code>-c</code>.</p>"},{"location":"usage/#-group-symbol","title":"<code>--group-symbol</code>","text":"<p>Defines the character the HTML document uses to group digits in numbers (for example the <code>,</code> in <code>1,000,000</code>).</p> <pre><code>$ htmltab --group-symbol , &lt;&lt;&lt; '&lt;table&gt;&lt;tr&gt;&lt;td&gt;1,000,000&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'\n1000000\n</code></pre> <p>By default <code>,</code> is used as the grouping character. If you need to use a full stop as a grouping character, pass <code>--group-symbol .</code>.</p> <p>The short form of this option is <code>-g</code>.</p>"},{"location":"usage/#-decimal-symbol","title":"<code>--decimal-symbol</code>","text":"<p>Defines the character the HTML document uses as the decimal separator (for example the <code>.</code> in <code>1000.00</code>).</p> <pre><code>$ htmltab --decimal-symbol , &lt;&lt;&lt; '&lt;table&gt;&lt;tr&gt;&lt;td&gt;1000000,00&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'\n100000000\n</code></pre> <p>By default <code>.</code> is used as the decimal separator. If you need to use a comma as a decimal separator, pass <code>--decimal-symbol ,</code>.</p> <p>The short form of this option is <code>-d</code>.</p>"},{"location":"usage/#-currency-symbol","title":"<code>--currency-symbol</code>","text":"<p>Defines the character to remove when converting number-like strings. You can pass the option multiple times if you have more than one currency symbol.</p> <pre><code>$ htmltab --currency-symbol \u20b9 &lt;&lt;&lt; '&lt;table&gt;&lt;tr&gt;&lt;td&gt;10\u20b9&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'\n10\n</code></pre> <p>By default <code>$</code>, <code>\u00a5</code>, <code>\u00a3</code>, and <code>\u20ac</code> considered to be currency symbols. These are not used if you pass your own currency symbols (unless you include them explicitly).</p> <p>The short form of this option is <code>-u</code>.</p>"},{"location":"usage/#-null-value","title":"<code>--null-value</code>","text":"<p>Allows you to define a case-sensitive value to convert to an empty cell in the CSV output. You can pass the option multiple times if you have more than one null value.</p> <pre><code>htmltab data.html --null-value None --null-value NO\n</code></pre> <p>By default, <code>NA</code>, <code>N/A</code>, <code>.</code>, and <code>-</code> are considered null values. These are not used if you pass your own null value (unless you include them explicitly).</p> <p>The short form of this option is <code>-n</code>.</p>"},{"location":"usage/#-delimiter","title":"<code>--delimiter</code>","text":"<p>Let\u2019s you choose the character used to separate fields in the CSV output. By default a comma (<code>,</code>) is used as the delimiter. If you want to use a tab as a delimiter, pass <code>--delimiter $'\\t'</code> (Bash and Zsh) or <code>--delimiter (printf '\\t')</code> (Fish).</p> <p>The short form of this option is <code>-e</code>.</p>"},{"location":"usage/#-version","title":"<code>--version</code>","text":"<p>Show the version of HTMLTab you have installed, and exit.</p>"},{"location":"usage/#-help","title":"<code>--help</code>","text":"<p>Show a usage message \u2014 essentially a short version of this page \u2014 and exit.</p>"},{"location":"examples/diff-tables/","title":"Compare two CSV files and output only lines that differ","text":"<p>This guide shows you how to compare two CSV files and output the difference as a CSV file. As well as using HTMLTab it also uses <code>sdiff</code>, a standard tool on Linux and MacOS.</p> <p>Let\u2019s say that yesterday you requested data from <code>https://example.com/data.csv</code> and saved it to a local file named <code>yesterday.csv</code>.</p> <pre><code>htmltab https://example.com/data.csv &gt; yesterday.csv\n</code></pre> <p>Today you can see the differences using:</p> <pre><code>htmltab https://example.com/data.csv &gt; today.csv\nsdiff --suppress-common-lines yesterday.csv today.csv\n</code></pre> <p>That will use HTMLTab to get the fresh CSV data from the URL, save it as <code>today.csv</code>, and use <code>sdiff</code> to compare the new data against the old, suppressing any lines that haven\u2019t changed.</p>  <p>Tip</p> <p>If you\u2019re feeling adventurous, you can feed HTMLTab\u2019s output directly into <code>sdiff</code> without saving an intermediate file:</p> <pre><code>sdiff --suppress-common-lines yesterday.csv &lt;(htmltab https://example.com/data.csv)\n</code></pre>"},{"location":"examples/filter-rows/","title":"Filter rows in an output CSV","text":"<p>You can use HTMLTab in combination with xsv to output only those rows within a table that match a string or regular expression. For example, to get a list of countries whose entire sovereignty is disputed by another state, run:</p> <pre><code>htmltab --select 2 https://en.wikipedia.org/wiki/List_of_sovereign_states \\\n    | xsv search -s 3 \"None\" --invert-match \\\n    | xsv select 1\n</code></pre> <ol> <li><code>htmltab --select 2</code> selects the second <code>&lt;table&gt;</code> element on the Wikipedia page, and converts it to CSV</li> <li><code>xsv search --select 3 --invert-match \"None\"</code> filters out all CSV rows where the third column contains <code>None</code></li> <li><code>xsv select 1</code> extracts only the first column from the remaining data.</li> </ol> <p>As of the time of writing, that command outputs:</p> <pre><code>Common and formal names\nArmenia \u2013 Republic of Armenia\nChina \u2013 People's Republic of China[o]\nCyprus \u2013 Republic of Cyprus\nIsrael \u2013 State of Israel\nNorth Korea \u2013 Democratic People's Republic of Korea\nPalestine \u2013 State of Palestine\nSouth Korea \u2013 Republic of Korea\n</code></pre>"}]}